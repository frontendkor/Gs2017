// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$ic-act-name: 'ic-act'
$ic-act-x: 0px
$ic-act-y: 0px
$ic-act-offset-x: 0px
$ic-act-offset-y: 0px
$ic-act-width: 16px
$ic-act-height: 20px
$ic-act-total-width: 20px
$ic-act-total-height: 80px
$ic-act-image: 'footer-ic.png'
$ic-act: (0px, 0px, 0px, 0px, 16px, 20px, 20px, 80px, 'footer-ic.png', 'ic-act', )
$ic-dogovor-name: 'ic-dogovor'
$ic-dogovor-x: 0px
$ic-dogovor-y: 20px
$ic-dogovor-offset-x: 0px
$ic-dogovor-offset-y: -20px
$ic-dogovor-width: 16px
$ic-dogovor-height: 20px
$ic-dogovor-total-width: 20px
$ic-dogovor-total-height: 80px
$ic-dogovor-image: 'footer-ic.png'
$ic-dogovor: (0px, 20px, 0px, -20px, 16px, 20px, 20px, 80px, 'footer-ic.png', 'ic-dogovor', )
$ic-log-name: 'ic-log'
$ic-log-x: 0px
$ic-log-y: 40px
$ic-log-offset-x: 0px
$ic-log-offset-y: -40px
$ic-log-width: 16px
$ic-log-height: 20px
$ic-log-total-width: 20px
$ic-log-total-height: 80px
$ic-log-image: 'footer-ic.png'
$ic-log: (0px, 40px, 0px, -40px, 16px, 20px, 20px, 80px, 'footer-ic.png', 'ic-log', )
$ic-pencil-name: 'ic-pencil'
$ic-pencil-x: 0px
$ic-pencil-y: 60px
$ic-pencil-offset-x: 0px
$ic-pencil-offset-y: -60px
$ic-pencil-width: 20px
$ic-pencil-height: 20px
$ic-pencil-total-width: 20px
$ic-pencil-total-height: 80px
$ic-pencil-image: 'footer-ic.png'
$ic-pencil: (0px, 60px, 0px, -60px, 20px, 20px, 20px, 80px, 'footer-ic.png', 'ic-pencil', )
$spritesheet-width: 20px
$spritesheet-height: 80px
$spritesheet-image: 'footer-ic.png'
$spritesheet-sprites: ($ic-act, $ic-dogovor, $ic-log, $ic-pencil, )
$spritesheet: (20px, 80px, 'footer-ic.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
